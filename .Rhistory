runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = c(1,2,3)
a == 1
find(a,1)
1 %in% a
a(null)
a(1)
a = c(1,2,3)
a(1)
a(0)
a(5)
a[5]
a[1]
a[0]
a[5]
a[NULL]
a[numeric(0)]
a[2]
b = 1
b[1]
b[2]
b[NA]
b[NA]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
5
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_data <- iris
View(my_dtaa)
View(my_data)
clean_data <- my_data[,1:4]
View(clean_data)
View(clean_data)
View(melt(clean_data))
View(melt(clean_data))
View(melt(clean_data,1))
View(melt(clean_data,2))
View(melt(clean_data))
View(melt(clean_data,colnames(clean_data)))
View(melt(clean_data,0))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(1,
2
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c('hello','no','hey','ho')
sort(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ToothGrowth
setwd("..")
runApp()
runApp()
View(ToothGrowth)
View(ToothGrowth)
runApp()
runApp()
runApp()
runApp()
` p <- ggplot(ToothGrowth,aes(x = supp, y = dose)) + geom_boxplot()
)
l
p <- ggplot(ToothGrowth,aes(x = supp, y = dose)) + geom_boxplot()
p
ggplot_build(p)
runApp()
runApp()
setwd('Vector-Explorer/')
setwd('Vector-Explorer/')
runApp()
p <- ggplot(ToothGrowth,aes(x = supp, y = dose)) + geom_boxplot()
install.packages(gridDebug)
install.packages('gridDebug')
install.packages('gridDebug',repo = 'https://cran.rstudio.com/')
install.packages('gridDebug', repos='http://cran.rstudio.com/')
showGrob()
p
showGrob()
sceneListing <- grid.ls(viewports=T, print=FALSE)
 do.call("cbind", sceneListing)
h <- grid.get(gPath="GRID.gTableParent.45019")
h$layout
h$layoutvp
h
h <- grid.get(gPath=""GRID.gTableParent.25448::panel.3-4-3-4"    ")
h <- grid.get(gPath=""GRID.gTableParent.25448::panel.3-4-3-4"    ")
h <- grid.get)gpath = ""GRID.gTableParent.25448::panel.3-4-3-4"    ")
h <- grid.get(gpath = "GRID.gTableParent.25448::panel.3-4-3-4")
h <- grid.get)gpath = ""GRID.gTableParent.25448::panel.3-4-3-4"    ")
 do.call("cbind", sceneListing)
h <- grid.get(gPath="GRID.gTableParent.25448")
h$layoutvp
h$layoutvp$width
convertWidth(unit(1,'npc'), 'inch', TRUE)
grid.ls(view=TRUE,grob=FALSE)
current.vpTree()
seekViewport('panel.3-4-3-4')
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
p
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
p
current.vpTree()
seekViewport('layout')
 a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
popViewport(1)
seekViewport('layout')
p
seekViewport('layout')
 a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
 convertWidth(unit(1,'npc'), 'inch', TRUE)
seekViewport('axis-b.4-4-4-4')
 convertWidth(unit(1,'npc'), 'inch', TRUE)
seekViewport('panel.3-4-3-4')
 convertWidth(unit(1,'npc'), 'inch', TRUE)
 convertHeight(unit(1,'npc'), 'inch', TRUE)
seekViewport('layout')
 convertHeight(unit(1,'npc'), 'inch', TRUE)
 convertHeight(unit(1,'npc'), 'inch', TRUE)
seekViewport('panel.3-4-3-4')
 convertHeight(unit(1,'npc'), 'inch', TRUE)
 sceneListing <- grid.ls(viewports=T, print=FALSE)
  do.call("cbind", sceneListing)
h <- grid.get(gPath="GRID.gTableParent.25728")
h
summary(h)
h$layoutvp
summary(h$layoutvp)
ggplt_build(p)$panel$ranges[[1]]$x.major_source
ggplot_build(p)$panel$ranges[[1]]$x.major_source
ggplot_build(p)$panel$ranges[[1]]$x.major
ggplot_build(p)
popViewport(1)
  do.call("cbind", sceneListing)
h <- grid.get(gPath="GRID.gTableParent.25728::panel.3-4-3-4" )
h
h <- grid.get(gPath="GRID.gTableParent.25728" )
h
h <- grid.get(gPath="GRID.gTableParent.25728")
h
p
 sceneListing <- grid.ls(viewports=T, print=FALSE)
h <- grid.get(gPath="GRID.gTableParent.25728" )
h
  do.call("cbind", sceneListing)
h <- grid.get(gPath="GRID.gTableParent.25850" )
h
h <- grid.get(gPath="GRID.gTableParent.25850::panel.3-4-3-4" )
h
summary(h)
summary(h$wrapvp)
h$wrapvx
h$wrap$x
 convertWidth(unit(0.5,'npc'), 'inch', TRUE)
h$wrap$y
 convertWidth(unit(0.5,'npc'), 'inch', TRUE)
  do.call("cbind", sceneListing)
h <- grid.get(gPath="GRID.gTableParent.25850::axis-l.3-3-3-3" )
summary(h)
summary(h$width)
summary(h$wrapvp)
summary(h$wrapvp$width)
h$wrapvp$width
 convertWidth(unit(1,'npc'), 'inch', TRUE)
 sceneListing <- grid.ls(viewports=T, print=FALSE)
p
 sceneListing <- grid.ls(viewports=T, print=FALSE)
  do.call("cbind", sceneListing)
seekViewport('spacer.4-3-4-3')
a <- convertWidth(unit(1,'npc'), 'inch', TRUE)
a
seekViewport('panel.3-4-3-4')
b <- convertWidth(unit(1,'npc'), 'inch', TRUE)
b
seekViewport('layout')
b <- convertWidth(unit(1,'npc'), 'inch', TRUE)
b
b
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(a,b)
print(a)
print(c(a,b))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library('shiny')
library(devtools)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()

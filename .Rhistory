setwd("..")
setwd("Desktop/Vector-Explorer/")
library(shiny)
runApp()
runApp()
df <- read.csv('iris.csv')
# we loop through each column and determine its type 
for (i in 1:dim(df)[2]){
# first task is to scrub the data 
df[,i] <- gsub(" ", "", df[,i]) # remove spaces 
#df[,i] <- tolower(df[,i])#Convert to lowercase
# check to make sure there are no Infs 
bad_indi <- which(is.infinite(df[,i])) #CHECK THIS
if (length(bad_indi) > 0 ) # we found some Nas 
{
df[bad_indi,i] <- NA
}
na_indi <- sum(is.na(df[,i])) # get initial count of na indices 
# check if it is numeric by converting to it 
test <- df[,i] # holder variable 
test <- as.numeric(test) 
na_indi2 <- sum(is.na(test))
if (na_indi2 > na_indi) #must be characters 
{
dataTypes[i] <- "character"
} else { 
dataTypes[i] <- "double"
df[,i] <- test
}
}
if(input$proc){
df <- na.omit(df)
}
# we now look to convert to factors 
for (i in 1:(dim(df)[2])){
if (dataTypes[i] == "character"){
dataTypes[i] = "factor"
df[,i] <- as.factor(df[,i])
if (nlevels(df[,i]) > 10000) # bad column and we delete 
{
dataTypes[i] <- 0 # mark to remove data type
}
}
}
r_indi <- which(dataTypes == 0)
if(length(r_indi) > 0) {
df <- df[,-r_indi]
dataTypes <- dataTypes[-r_indi]
}
#View(df)
data_with_factors <- df
f_indi <- which(dataTypes == "factor")
if(length(f_indi) > 0) {
df <- df[,-f_indi]
dataTypes <- dataTypes[-f_indi]
}
#View(df)
data <- list(df,data_with_factors)
View(data)
View(df)
dataTypes <- vector(mode="character", length = dim(df)[2])  # define a vector to hold each columns data type 
# we loop through each column and determine its type 
for (i in 1:dim(df)[2]){
# first task is to scrub the data 
df[,i] <- gsub(" ", "", df[,i]) # remove spaces 
#df[,i] <- tolower(df[,i])#Convert to lowercase
# check to make sure there are no Infs 
bad_indi <- which(is.infinite(df[,i])) #CHECK THIS
if (length(bad_indi) > 0 ) # we found some Nas 
{
df[bad_indi,i] <- NA
}
na_indi <- sum(is.na(df[,i])) # get initial count of na indices 
# check if it is numeric by converting to it 
test <- df[,i] # holder variable 
test <- as.numeric(test) 
na_indi2 <- sum(is.na(test))
if (na_indi2 > na_indi) #must be characters 
{
dataTypes[i] <- "character"
} else { 
dataTypes[i] <- "double"
df[,i] <- test
}
}
if(input$proc){
df <- na.omit(df)
}
# we now look to convert to factors 
for (i in 1:(dim(df)[2])){
if (dataTypes[i] == "character"){
dataTypes[i] = "factor"
df[,i] <- as.factor(df[,i])
if (nlevels(df[,i]) > 10000) # bad column and we delete 
{
dataTypes[i] <- 0 # mark to remove data type
}
}
}
r_indi <- which(dataTypes == 0)
if(length(r_indi) > 0) {
df <- df[,-r_indi]
dataTypes <- dataTypes[-r_indi]
}
#View(df)
data_with_factors <- df
f_indi <- which(dataTypes == "factor")
if(length(f_indi) > 0) {
df <- df[,-f_indi]
dataTypes <- dataTypes[-f_indi]
}
#View(df)
data <- list(df,data_with_factors)
View(df)
View(df)
name = "Sepal.Length"
current_column <- which(colnames(data) == name)
current_column
data <- data[[1]]
View(data)
current_column <- which(colnames(data) == name)
current_column
current_mean <- mean(data[,current_column])
current_median <- median(data[,current_column])
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(aes(y = ..density..), fill = "deepskyblue2", color = "white", alpha = 0.2) + geom_density(fill = "blue" , alpha = 0.2) + title("Marginal Distribution") + ylab('Density')
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(aes(y = ..density..), fill = "deepskyblue2", color = "white", alpha = 0.2) + geom_density(fill = "blue" , alpha = 0.2) + title("Marginal Distribution") + ylab('Density')
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(fill = "deepskyblue2", alpha = 0.2, color = "white") + title("Marginal Distribution") + ylab('Counts')
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(fill = "deepskyblue2", alpha = 0.2, color = "white")
p <- title("Marginal Distribution") + ylab('Counts')
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(fill = "deepskyblue2", alpha = 0.2, color = "white") 
p <- p + title("Marginal Distribution") + ylab('Counts')
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(aes(y = ..density..), fill = "deepskyblue2", color = "white", alpha = 0.2) + geom_density(fill = "blue" , alpha = 0.2) + ggtitle("Marginal Distribution") + ylab('Density')
runApp()
type = "Combined"
  Marginals <- function(data,name,type){
validate(need(name, message=FALSE))
current_column <- which(colnames(data) == name)
current_mean <- mean(data[,current_column])
current_median <- median(data[,current_column])
if (type == "hist"){
p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(fill = "deepskyblue2", alpha = 0.2, color = "white") + ggtitle("Marginal Distribution") + ylab('Counts')
} else if (type == "kd"){
p <- ggplot(data, aes_q(x = as.name(name))) + geom_density(fill = "blue" , alpha = 0.2) + ggtitle("Marginal Distribution") + ylab('Density')
}
else{
 p <- ggplot(data, aes_q(x = as.name(name))) + geom_histogram(aes(y = ..density..), fill = "deepskyblue2", color = "white", alpha = 0.2) + geom_density(fill = "blue" , alpha = 0.2) + ggtitle("Marginal Distribution") + ylab('Density')
}
p <- p + theme(text = element_text(size=20)) + geom_vline(xintercept = current_mean, color = "steelblue") +  geom_text(x= current_mean, label="Mean", y = 0, colour="steelblue", angle=90, text=element_text(size=11), vjust=-0.4, hjust=-6.6) + geom_vline(xintercept = current_median, color = "red") +  geom_text(x = current_median , label="Median", y = 0 , colour="red", angle=90, text=element_text(size=11), vjust=-0.4, hjust=-5)
  }
marginals(data,name,type)
arginals(data,name,type)
Marginals(data,name,type)
p<-Marginals(data,name,type)
p
print(p)
runApp()
runApp()
runApp()
install.packages('LICORS')
kmeans()
View(data)
a<- kmeans(data,10)
a
a[1]
View(rbind(data,z = a[1]))
View(rbind(data,a[1]))
View(rbind(data,t(a[1])))
size(data)
dim(data)
length(a[1])
size(a[1])
dim(a[1])
dim(a$cluster)
size(a$cluster)
length(a$cluster)
View(rbind(data,a$cluster)
)
View(cbind(data,a$cluster))
View(cbind(data,z = a$cluster))
runApp()
runApp()
dev.new(width=5, height=4)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('DT')
install.packages('DT')
runApp()
install.packages('DT')
repos='http://cran.us.r-project.org'
install.packages('DT',repos='http://cran.us.r-project.org')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help DT
library(DT)
datatable
?datatable
?DT::renderDataTable
DT::renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/DT')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
